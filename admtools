#!/usr/bin/env bash

unset TSURU_TARGET #Fix bug in tsuru <=1.0.0rc5
test -z "$REDIS_PARAMETERS" && REDIS_PARAMETERS="-h redis-hipache.yourcompany.com"
test -z "$TIMEOUT_REQUEST" && TIMEOUT_REQUEST=5
test -z "$NGINX_LOG" && NGINX_LOG=/var/log/nginx/access.log
test -z "$ROUTERPLAN" && ROUTERPLAN="hipache"

function check-app() {
	shift
	app=$1
	path=$2
	test -z "$path" && path="$(get-healthcheck $app)"
	test -d "$TMP" && tempfile=$TMP/.tsurupluginadmtools-$RANDOM || tempfile=$HOME/.tsurupluginadmtools-$RANDOM

	appinfo=$(tsuru app-info -a $app)
	if echo "$appinfo"|grep 'Units \[web\]:' 2>/dev/null >&1
	then
		#Treating only the web process
		unitlist=$(echo "$appinfo"|sed -n '/Units \[[wW][eE][bB]\]:/,/^$/ p'|awk '$8 !~ /^$/ && $2 != "Unit" && $2 ~ /^([a-f0-9])+$/ {print $2,$4,$6":"$8}')
	elif [ "$(echo "$appinfo"|grep -c 'Units' 2>/dev/null >&1)" -eq 1 ]
	then
		#Treating the uniq process as web process
		unitlist=$(echo "$appinfo" |awk '$8 !~ /^$/ && $2 != "Unit" && $2 ~ /^([a-f0-9])+$/ {print $2,$4,$6":"$8}')
	else
		echo "The App: $app doesn't have a WEB process"
		exit 1
	fi

	IFS='
'
	for i in $unitlist
	do
		echo unit: ${i}${path}
		(time curl --max-time $TIMEOUT_REQUEST --connect-timeout 1 $(echo $i|awk '{print $3}')${path} >/dev/null 2>&1\
			&&\
				echo status: OK\
			||\
				echo status: BAD
		) 2>&1|egrep "status|unit|real"
		echo
	done|tee $tempfile
	echo $(grep -c OK $tempfile) OK
	echo $(grep -c BAD $tempfile) BAD
	echo
	echo Top slow requests until $TIMEOUT_REQUEST seconds
	awk '/real/{print $2}' $tempfile|sort -n|tail -10
	echo
	test -f $tempfile; rm -f $tempfile
}

function check-app-router() {
	shift
	app=$1
	path=$2
	test -z "$path" && path="$(get-healthcheck $app)"
	test -d "$TMP" && tempfile=$TMP/.tsurupluginadmtools-$RANDOM || tempfile=$HOME/.tsurupluginadmtools-$RANDOM

	for i in $(echo "lrange frontend:$app 0 -1"|redis-cli $REDIS_PARAMETERS|awk -F/ '/http/{print $3}')
	do
		echo unit: ${i}${path}
		(time curl --max-time $TIMEOUT_REQUEST --connect-timeout 1 ${i}${path} >/dev/null 2>&1\
			&&\
				echo status: OK\
			||\
				echo status: BAD
		) 2>&1|egrep "status|unit|real"
		echo
	done|tee $tempfile
	echo $(grep -c OK $tempfile) OK
	echo $(grep -c BAD $tempfile) BAD
	echo
	echo Top slow requests until $TIMEOUT_REQUEST seconds
	awk '/real/{print $2}' $tempfile|sort -n|tail -10
	echo
	test -f $tempfile; rm -f $tempfile
}

function verify-hipache-x-tsuru() {
	for app in $(tsuru app-list|awk '$5=="of"{print $2}')
	do
		info=$(tsuru app-info -a $app)
		echo -- $app
		if [ -z "$(echo "$info"|grep -A4 'App Plan'|tail -n 1|grep "$ROUTERPLAN")" ]
		then
			echo "no hipache like router"
			echo
			continue
		fi
		if [ -z "$(echo "$info"|grep 'Units \[web\]: ')" ]
		then
			echo "no web process"
			echo
			continue
		fi
		for domain in $(echo "$info"|sed '/^Address: \(.*\)$/!d; s//\1/;s/,//g;')
		do
			echo $domain
			diff \
			<(for i in $(echo "lrange frontend:$domain 0 -1"|redis-cli $REDIS_PARAMETERS|awk -F/ '/http/{print $3}')
			do
				echo ${i}
			done|sort) \
			<(echo "$info"|sed -n '/Units \[[wW][eE][bB]\]:/,/^$/ p'|awk '$8 !~ /^$/ && $2 != "Unit" && $2 ~ /^([a-f0-9])+$/ {print $6":"$8}'|sort)

		done
		echo
	done
}

function get-healthcheck() {
	app=$1
	tsuru app-run 'grep -A1 ^healthcheck: {app,tsuru}.y?ml 2>/dev/null|awk "/path:/{print \$3; exit}"' -a $app -o
}

function node-list() {
	shift
	pool=$1
		test "$1"\
		&&\
			echo $(tsuru-admin docker-node-list |\
			tail -r|\
			sed -n /pool=$pool'[^a-z]*$/,/^..http/!d; /^..https*:..\([^:]*\).*/!d; s//\1/; p')\
		||\
			tsuru pool-list|\
			sed 1,3d|\
			awk '! $2 ~ //{print $2}'
}

function node-exec() {
	shift
	test -z "$2" && cmd="$1"
	 test "$2" && pool="$1" && cmd="$2"

	 test -z "$pool"\
		&&\
			for i in $(
					tsuru-admin docker-node-list|\
						sed '/^..http:..\([^:]*\).*/!d; s//\1/'
				)
			do
				echo Docker Node: $i
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5 $i "$cmd"
			done\
		||\
			for i in $(
					tsuru-admin docker-node-list|\
					tail -r|\
					sed -n	/pool=$pool'[^a-z]*$/,/^..http/!d
						/^..http:..\([^:]*\).*/!d
						s//\1/
						p'
				)
			do
				echo Docker Node: $i
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5 $i "$cmd"
			done
}

function node-exec-parallel() {
	shift
	test -z "$2" && cmd="$1"
	 test "$2" && pool="$1" && cmd="$2"
	nodes=""
	 test -z "$pool"\
		&&\
			for i in $(
					tsuru-admin docker-node-list|\
						sed '/^..http:..\([^:]*\).*/!d; s//\1/'
				)
			do
				nodes="${i} ${nodes}"
			done\
		||\
			for i in $(
					tsuru-admin docker-node-list|\
					tail -r|\
					sed -n	/pool=$pool'[^a-z]*$/,/^..http/!d
						/^..http:..\([^:]*\).*/!d
						s//\1/
						p'
				)
			do
				nodes="${i} ${nodes}"
			done

	! test -z "${nodes}" && parallel -j50 -v ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=20 {} \'$cmd\' ::: ${nodes}
}

function node-addrs() {
	shift
	test -z "$2" && cmd="$1"
	test "$2" && pool="$1" && cmd="$2"

	test -z "$pool"\
		&&\
			for i in $(
					tsuru-admin docker-node-list|\
						sed '/^..http:..\([^:]*\).*/!d; s//\1/'
				)
			do
				echo $i
			done\
		||\
			for i in $(
					tsuru-admin docker-node-list|\
					tail -r|\
					sed -n	/pool=$pool'[^a-z]*$/,/^..http/!d
						/^..http:..\([^:]*\).*/!d
						s//\1/
						p'
				)
			do
				echo $i
			done
}

function acl-check() {
	shift
	test -z "$2" && cmd="$1"
	 test "$2" && pool="$1" && cmd="$2"

	 test -z "$pool"\
		&&\
			for i in $(
					tsuru-admin docker-node-list|\
						sed '/^..http:..\([^:]*\).*/!d; s//\1/'
				)
			do
				echo Docker Node: $i
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5 $i "nc -vzw2 $cmd"
			done\
		||\
			for i in $(
					tsuru-admin docker-node-list|\
					tail -r|\
					sed -n	/pool=$pool'[^a-z]*$/,/^..http/!d
						/^..http:..\([^:]*\).*/!d
						s//\1/
						p'
				)
			do
				echo Docker Node: $i
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=5 $i "nc -vzw2 $cmd"
			done
}

function rpaas-per-minute() {
	shift
	case "$1" in
	   url)
		  rpaas-per-minute-url "$@"
		  ;;
	   bad-url)
		  rpaas-per-minute-bad-url "$@"
		  ;;
	   slow-url)
		  rpaas-per-minute-slow-url "$@"
		  ;;
	   *)
		  rpaas-per-minute-status-code "$@"
		  ;;
	esac
}


function rpaas-per-minute-status-code() {
	test "$1" = "status-code" && shift
	ip_rpaas="$1"
	 test $2 && date_log="$2" || date_log=$(date +%d/%b/%Y:%H:)
	 date_log=$(echo $date_log|sed 's,/,\\/,g')

	ssh $ip_rpaas 'sudo su -c "IFS=\"
\"; for i in \$(awk /\"'$date_log'/{print \\\$2}\" '$NGINX_LOG'|sed \"s/^\(.*:\)[0-9][0-9]\(.*\)$/\1/g\"|uniq -c); do echo \$i;grep \$(echo \$i|awk \"{print \\\$2}\") '$NGINX_LOG'|awk -F \"\\\t\" \"{print \\\$8}\"|sort|uniq -c|sort -n;done   "'
}

function rpaas-per-minute-url() {
	shift
	ip_rpaas="$1"
	 test $2 && date_log="$2" || date_log=$(date +%d/%b/%Y:%H:)
	 date_log=$(echo $date_log|sed 's,/,\\/,g')

	ssh $ip_rpaas 'sudo su -c "IFS=\"
\"; for i in \$(awk /\"'$date_log'/{print \\\$2}\" '$NGINX_LOG'|sed \"s/^\(.*:\)[0-9][0-9]\(.*\)$/\1/g\"|uniq -c); do echo \$i;grep \$(echo \$i|awk \"{print \\\$2}\") '$NGINX_LOG'|awk -F \"\\\t\" \"{print \\\$2,\\\$3,\\\$4,\\\$8}\"|sort|uniq -c|sort -n|tail -n20;done   "'
}


function rpaas-per-minute-bad-url() {
	shift
	ip_rpaas="$1"
	 test $2 && date_log="$2" || date_log=$(date +%d/%b/%Y:%H:)
	 date_log=$(echo $date_log|sed 's,/,\\/,g')

	ssh $ip_rpaas 'sudo su -c "IFS=\"
\"; for i in \$(awk /\"'$date_log'/{print \\\$2}\" '$NGINX_LOG'|sed \"s/^\(.*:\)[0-9][0-9]\(.*\)$/\1/g\"|uniq -c); do echo \$i;grep \$(echo \$i|awk \"{print \\\$2}\") '$NGINX_LOG'|awk -F \"\\\t\"  \"\\\$8 !~ /^[23]|404/ {print \\\$2,\\\$3,\\\$4,\\\$8}\"|sort|uniq -c|sort -n|tail -n20;done   "'
}

function rpaas-per-minute-slow-url() {
	shift
	ip_rpaas="$1"
	 test $2 && date_log="$2" || date_log=$(date +%d/%b/%Y:%H:)
	 date_log=$(echo $date_log|sed 's,/,\\/,g')

	ssh $ip_rpaas 'sudo su -c "IFS=\"
\"; for i in \$(awk /\"'$date_log'/{print \\\$2}\" '$NGINX_LOG'|sed \"s/^\(.*:\)[0-9][0-9]\(.*\)$/\1/g\"|uniq -c); do echo \$i;grep \$(echo \$i|awk \"{print \\\$2}\") '$NGINX_LOG'|awk -F \"\\\t\" \"{print \\\$2,\\\$3,\\\$4,\\\$8,\\\$10}\"|sort -nk8|tail -n20;done   "'
}

RETVAL=0

case "$1" in
   ""|--help|-h)
	  echo "Usage: tsuru $(basename $0) [ -l|--node-list <pool> ] | [ -d|--node-addrs <pool> ] | [ -x|--node-exec <pool> 'cmd' ] | [ -a|--acl-check <pool> 'ip port' ] | [ --check-app|-c appname <path> ] | [ --check-app-router|-r appname <path> ] | [ -m|--rpaas-per-minute <status-code>|url|bad-url|slow-url ip-rpaas <stringlog> ] | [ --verify-hipache-x-tsuru|-v ] | [ --help|-h ]"
	  RETVAL=1
	  ;;
   --node-list|-l)
	  node-list "$@"
	  ;;
   --node-addrs|-d)
	  node-addrs "$@"
	  ;;
   --check-app|-c)
	  check-app "$@"
	  ;;
   --acl-check|-a)
	  acl-check "$@"
	  ;;
   --check-app-router|-r)
	  check-app-router "$@"
	  ;;
   --node-exec|-x)
	  node-exec "$@"
	  ;;
   --node-exec-parallel|-xp)
	  node-exec-parallel "$@"
	  ;;
   --rpaas-per-minute|-m)
	  rpaas-per-minute "$@"
	  ;;
   --verify-hipache-x-tsuru|-v)
	  verify-hipache-x-tsuru "$@"
	  ;;
esac

exit $RETVAL
